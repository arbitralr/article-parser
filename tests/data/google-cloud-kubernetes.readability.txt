<div _ngcontent-c46="" class="rich-text" innerhtml="<p>When it comes to open source software (OSS) like Kubernetes, some people get nervous not knowing everyone who&amp;#8217;s worked on the code in the project. &amp;#8220;How can I trust something when anyone can contribute?&amp;#8221; &amp;#8220;If there&amp;#8217;s a vulnerability, who&amp;#8217;s paying attention?&amp;#8221; <br /></p><p>In fact, many OSS projects have robust security teams and rigorous vulnerability management processes, just like you&amp;#8217;d expect to find in proprietary software. For Kubernetes, a dedicated <a href=&quot;https://github.com/kubernetes/security/blob/master/security-release-process.md#product-security-committee-psc&quot;>Product Security Committee</a> oversees the security response process. <a href=&quot;https://github.com/kubernetes/security/blob/master/security-release-process.md#product-security-committee-psc&quot;>Learning about this process</a> will give you a better understanding about the project, what to do if you suspect an issue, and <a href=&quot;https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-the-shared-responsibility-model-in-gke-container-security-shared-responsibility-model-gke&quot;>your role in vulnerability response as a downstream Kubernetes user</a>.</p><p>The Product Security Committee is a group of core maintainers, many with security-specific roles, nominated by other core maintainers and technical advisors within the community. The Committee&amp;#8217;s role is to respond to any and all emails about a potential vulnerability, according to a documented <a href=&quot;https://kubernetes.io/docs/reference/issues-security/security/&quot;>response process</a>. Here&amp;#8217;s an overview.</p><p><b>1. Triage the disclosure&amp;#160;<br /></b>When the team receives a disclosure, it begins investigating whether the submission is a real issue or just a bug without security implications. If the committee confirms that it&amp;#8217;s an issue, it then leads the development and release of a patch and notifies the community.&amp;#160;</p><p><b>2. Assess the impact of the vulnerability<br /></b>One key initial step is to determine a vulnerability&amp;#8217;s potential impact. This is usually represented as a <a href=&quot;https://www.first.org/cvss/specification-document&quot;>CVSS score</a> and the <a href=&quot;https://github.com/kubernetes/security/blob/master/security-release-process.md#severity-thresholds---how-we-do-vulnerability-scoring&quot;>documented severity criteria for Kubernetes vulnerabilities</a>. This score looks at criteria like how easily the issue can be exploited, the consequences if it is exploited, and the privileges required to exploit it. A score under 4.0 is considered low; between 4.0 and 7.0 is medium; between 7.0 and 9.0 is high, and above 9.0 is critical. This CVSS score acts as a rough barometer for how issues should be prioritized and with what urgency, with the caveat that the vulnerability&amp;#8217;s severity can vary depending on the specific Kubernetes deployment configuration and environment.</p><p><b>3. Generate a fix<br /></b>Next, the Product Security Committee works with the relevant developers to generate a fix. If the vulnerability involves components from other open source projects, the team works with security groups within those projects.&amp;#160;</p><p>There are times when a security fix can happen in the open, as part of a normal patch release. But if the vulnerability is severe enough, the patch will be developed and tested in private. At this point, only those who need to know should be aware of the vulnerability; you wouldn&amp;#8217;t want someone with malicious intent to have early knowledge of an unpatched issue.</p><p>For fixes that follow the private release process (and some that don't), the release of a security patch will include an explanatory announcement to <a href=&quot;https://groups.google.com/forum/#!forum/kubernetes-security-announce&quot;>kubernetes-security-announce</a>. And when necessary, a retrospective or postmortem is also released to the Kubernetes community, spelling out the steps taken, response timeline, and any other relevant details.&amp;#160;</p><p><b>4. Roll out the fix<br /></b>The next step is to roll out notifications to certified Kubernetes distributors. Because distributors are responsible for what end users receive, it&amp;#8217;s important that they have the opportunity to patch early (if a patch is needed) and prepare their own notifications. Like many open source projects, Kubernetes has a private list of distributors who get embargoed security notifications; anyone who meets the <a href=&quot;https://github.com/kubernetes/security/blob/master/private-distributors-list.md#membership-criteria&quot;>criteria</a> can sign up for these messages.&amp;#160;</p><p><b>So what does all this mean for you as a Kubernetes user<br /></b>First of all, make sure your team knows about the Product Security Committee&amp;#8217;s process&amp;#8212;it should help anyone who&amp;#8217;s unsure about open source security feel more confident in Kubernetes. The Product Security Committee is a robust and responsive group of Kubernetes and security experts working on your behalf, complete with an on-call rotation during working hours.&amp;#160;</p><p>Second, if you&amp;#8217;re deploying a container on Kubernetes and you notice something that makes you suspect a security issue, you should notify the Product Security Committee right away, safe in the knowledge that it&amp;#8217;ll follow a prescribed process to get to the bottom of things. For more information about when and how to report a vulnerability, check out <a href=&quot;https://kubernetes.io/docs/reference/issues-security/security/&quot;>Kubernetes Security and Disclosure Information</a>.&amp;#160;</p><p>It&amp;#8217;s also important to know your provider&amp;#8217;s communication policies with regard to vulnerabilities. To that end, be sure you know the answer to the following questions:<br /></p><ul><li><p>If there&amp;#8217;s a problem, when will my provider contact me?</p></li><li><p>Where are security bulletins posted for the services I&amp;#8217;m consuming?</p></li><li><p>How can I find out when patches will be available for those services?</p></li><li><p>Where can I find information about vulnerabilities for what I run in my environment?</p></li></ul><p>When appropriate, Google Cloud publishes <a href=&quot;https://cloud.google.com/kubernetes-engine/docs/security-bulletins&quot;>security bulletins</a> for Google Kubernetes Engine (GKE) and sends email notifications to affected users. If we can make patches on their behalf or the problem is one for which <a href=&quot;https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-the-shared-responsibility-model-in-gke-container-security-shared-responsibility-model-gke&quot;>Google Cloud is responsible</a>, we&amp;#8217;ll take care of fixes. GKE users should defer to the <a href=&quot;https://cloud.google.com/kubernetes-engine/docs/security-bulletins&quot;>GKE security bulletins</a> as their source of truth; it&amp;#8217;s updated whenever a new issue is severe enough to warrant attention.<br /></p><p>In short, as a Kubernetes end user you should:<br /></p><p></p><ol><li>Share the Kubernetes response and reporting processes with your team</li><li>Report any future suspected issues through the <a href=&quot;https://kubernetes.io/docs/reference/issues-security/security/#report-a-vulnerability&quot;>Kubernetes disclosure process</a></li><li>Learn about your provider's disclosure and patching policies</li></ol><p></p><p>By answering these questions and familiarizing yourself with the Kubernetes security response process, you can be an informed and confident user of open source software and ensure that your organization is taking an active role in your container security. For the latest in Kubernetes security news, be sure to subscribe to <a href=&quot;https://github.com/kubernetes/security/blob/master/security-release-process.md#fix-disclosure-process&quot;>kubernetes-security-announce@</a>.</p>"><p>When it comes to open source software (OSS) like Kubernetes, some people get nervous not knowing everyone who’s worked on the code in the project. “How can I trust something when anyone can contribute?” “If there’s a vulnerability, who’s paying attention?” <br></p><p>In fact, many OSS projects have robust security teams and rigorous vulnerability management processes, just like you’d expect to find in proprietary software. For Kubernetes, a dedicated <a href="https://github.com/kubernetes/security/blob/master/security-release-process.md#product-security-committee-psc">Product Security Committee</a> oversees the security response process. <a href="https://github.com/kubernetes/security/blob/master/security-release-process.md#product-security-committee-psc">Learning about this process</a> will give you a better understanding about the project, what to do if you suspect an issue, and <a href="https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-the-shared-responsibility-model-in-gke-container-security-shared-responsibility-model-gke">your role in vulnerability response as a downstream Kubernetes user</a>.</p><p>The Product Security Committee is a group of core maintainers, many with security-specific roles, nominated by other core maintainers and technical advisors within the community. The Committee’s role is to respond to any and all emails about a potential vulnerability, according to a documented <a href="https://kubernetes.io/docs/reference/issues-security/security/">response process</a>. Here’s an overview.</p><p><b>1. Triage the disclosure&nbsp;<br></b>When the team receives a disclosure, it begins investigating whether the submission is a real issue or just a bug without security implications. If the committee confirms that it’s an issue, it then leads the development and release of a patch and notifies the community.&nbsp;</p><p><b>2. Assess the impact of the vulnerability<br></b>One key initial step is to determine a vulnerability’s potential impact. This is usually represented as a <a href="https://www.first.org/cvss/specification-document">CVSS score</a> and the <a href="https://github.com/kubernetes/security/blob/master/security-release-process.md#severity-thresholds---how-we-do-vulnerability-scoring">documented severity criteria for Kubernetes vulnerabilities</a>. This score looks at criteria like how easily the issue can be exploited, the consequences if it is exploited, and the privileges required to exploit it. A score under 4.0 is considered low; between 4.0 and 7.0 is medium; between 7.0 and 9.0 is high, and above 9.0 is critical. This CVSS score acts as a rough barometer for how issues should be prioritized and with what urgency, with the caveat that the vulnerability’s severity can vary depending on the specific Kubernetes deployment configuration and environment.</p><p><b>3. Generate a fix<br></b>Next, the Product Security Committee works with the relevant developers to generate a fix. If the vulnerability involves components from other open source projects, the team works with security groups within those projects.&nbsp;</p><p>There are times when a security fix can happen in the open, as part of a normal patch release. But if the vulnerability is severe enough, the patch will be developed and tested in private. At this point, only those who need to know should be aware of the vulnerability; you wouldn’t want someone with malicious intent to have early knowledge of an unpatched issue.</p><p>For fixes that follow the private release process (and some that don't), the release of a security patch will include an explanatory announcement to <a href="https://groups.google.com/forum/#!forum/kubernetes-security-announce">kubernetes-security-announce</a>. And when necessary, a retrospective or postmortem is also released to the Kubernetes community, spelling out the steps taken, response timeline, and any other relevant details.&nbsp;</p><p><b>4. Roll out the fix<br></b>The next step is to roll out notifications to certified Kubernetes distributors. Because distributors are responsible for what end users receive, it’s important that they have the opportunity to patch early (if a patch is needed) and prepare their own notifications. Like many open source projects, Kubernetes has a private list of distributors who get embargoed security notifications; anyone who meets the <a href="https://github.com/kubernetes/security/blob/master/private-distributors-list.md#membership-criteria">criteria</a> can sign up for these messages.&nbsp;</p><p><b>So what does all this mean for you as a Kubernetes user<br></b>First of all, make sure your team knows about the Product Security Committee’s process—it should help anyone who’s unsure about open source security feel more confident in Kubernetes. The Product Security Committee is a robust and responsive group of Kubernetes and security experts working on your behalf, complete with an on-call rotation during working hours.&nbsp;</p><p>Second, if you’re deploying a container on Kubernetes and you notice something that makes you suspect a security issue, you should notify the Product Security Committee right away, safe in the knowledge that it’ll follow a prescribed process to get to the bottom of things. For more information about when and how to report a vulnerability, check out <a href="https://kubernetes.io/docs/reference/issues-security/security/">Kubernetes Security and Disclosure Information</a>.&nbsp;</p><p>It’s also important to know your provider’s communication policies with regard to vulnerabilities. To that end, be sure you know the answer to the following questions:<br></p><ul><li><p>If there’s a problem, when will my provider contact me?</p></li><li><p>Where are security bulletins posted for the services I’m consuming?</p></li><li><p>How can I find out when patches will be available for those services?</p></li><li><p>Where can I find information about vulnerabilities for what I run in my environment?</p></li></ul><p>When appropriate, Google Cloud publishes <a href="https://cloud.google.com/kubernetes-engine/docs/security-bulletins">security bulletins</a> for Google Kubernetes Engine (GKE) and sends email notifications to affected users. If we can make patches on their behalf or the problem is one for which <a href="https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-the-shared-responsibility-model-in-gke-container-security-shared-responsibility-model-gke">Google Cloud is responsible</a>, we’ll take care of fixes. GKE users should defer to the <a href="https://cloud.google.com/kubernetes-engine/docs/security-bulletins">GKE security bulletins</a> as their source of truth; it’s updated whenever a new issue is severe enough to warrant attention.<br></p><p>In short, as a Kubernetes end user you should:<br></p><ol><li>Share the Kubernetes response and reporting processes with your team</li><li>Report any future suspected issues through the <a href="https://kubernetes.io/docs/reference/issues-security/security/#report-a-vulnerability">Kubernetes disclosure process</a></li><li>Learn about your provider's disclosure and patching policies</li></ol><p>By answering these questions and familiarizing yourself with the Kubernetes security response process, you can be an informed and confident user of open source software and ensure that your organization is taking an active role in your container security. For the latest in Kubernetes security news, be sure to subscribe to <a href="https://github.com/kubernetes/security/blob/master/security-release-process.md#fix-disclosure-process">kubernetes-security-announce@</a>.</p></div>